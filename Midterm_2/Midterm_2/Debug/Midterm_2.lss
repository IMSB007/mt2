
Midterm_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000878  0000090c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000878  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800112  00800112  0000091e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000091e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000950  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001af0  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a1  00000000  00000000  00002570  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000083b  00000000  00000000  00002f11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  0000374c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000653  00000000  00000000  00003a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e35  00000000  00000000  00004097  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004ecc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e7       	ldi	r30, 0x78	; 120
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 31       	cpi	r26, 0x18	; 24
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 91 00 	call	0x122	; 0x122 <main>
  9e:	0c 94 3a 04 	jmp	0x874	; 0x874 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup_rf>:
	}

	return 0;
}

nRF24L01 *setup_rf(void) {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
	nRF24L01 *rf = nRF24L01_init();
  aa:	0e 94 f5 00 	call	0x1ea	; 0x1ea <nRF24L01_init>
  ae:	ec 01       	movw	r28, r24
	rf->ss.port = &PORTB;
  b0:	85 e2       	ldi	r24, 0x25	; 37
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	99 83       	std	Y+1, r25	; 0x01
  b6:	88 83       	st	Y, r24
	rf->ss.pin = PB2;
  b8:	22 e0       	ldi	r18, 0x02	; 2
  ba:	2a 83       	std	Y+2, r18	; 0x02
	rf->ce.port = &PORTB;
  bc:	9c 83       	std	Y+4, r25	; 0x04
  be:	8b 83       	std	Y+3, r24	; 0x03
	rf->ce.pin = PB1;
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	2d 83       	std	Y+5, r18	; 0x05
	rf->sck.port = &PORTB;
  c4:	9f 83       	std	Y+7, r25	; 0x07
  c6:	8e 83       	std	Y+6, r24	; 0x06
	rf->sck.pin = PB5;
  c8:	25 e0       	ldi	r18, 0x05	; 5
  ca:	28 87       	std	Y+8, r18	; 0x08
	rf->mosi.port = &PORTB;
  cc:	9a 87       	std	Y+10, r25	; 0x0a
  ce:	89 87       	std	Y+9, r24	; 0x09
	rf->mosi.pin = PB3;
  d0:	23 e0       	ldi	r18, 0x03	; 3
  d2:	2b 87       	std	Y+11, r18	; 0x0b
	rf->miso.port = &PORTB;
  d4:	9d 87       	std	Y+13, r25	; 0x0d
  d6:	8c 87       	std	Y+12, r24	; 0x0c
	rf->miso.pin = PB4;
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	8e 87       	std	Y+14, r24	; 0x0e
	// interrupt on falling edge of INT0 (PD2)
	EICRA |= _BV(ISC01);
  dc:	e9 e6       	ldi	r30, 0x69	; 105
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	80 83       	st	Z, r24
	EIMSK |= _BV(INT0);
  e6:	e8 9a       	sbi	0x1d, 0	; 29
	nRF24L01_begin(rf);
  e8:	ce 01       	movw	r24, r28
  ea:	0e 94 e5 01 	call	0x3ca	; 0x3ca <nRF24L01_begin>
	return rf;
}
  ee:	ce 01       	movw	r24, r28
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <process_message>:

void process_message(char *message) {
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	ec 01       	movw	r28, r24
	if (strcmp(message, "ON") == 0)
  fc:	6b e0       	ldi	r22, 0x0B	; 11
  fe:	71 e0       	ldi	r23, 0x01	; 1
 100:	0e 94 31 04 	call	0x862	; 0x862 <strcmp>
 104:	89 2b       	or	r24, r25
 106:	11 f4       	brne	.+4      	; 0x10c <process_message+0x16>
	DDRB |= _BV(PB0);
	PORTB &= ~_BV(PB0);
}

inline void set_led_high(void) {
	PORTB |= _BV(PB0);
 108:	28 9a       	sbi	0x05, 0	; 5
 10a:	08 c0       	rjmp	.+16     	; 0x11c <process_message+0x26>
}

void process_message(char *message) {
	if (strcmp(message, "ON") == 0)
	set_led_high();
	else if (strcmp(message, "OFF") == 0)
 10c:	6e e0       	ldi	r22, 0x0E	; 14
 10e:	71 e0       	ldi	r23, 0x01	; 1
 110:	ce 01       	movw	r24, r28
 112:	0e 94 31 04 	call	0x862	; 0x862 <strcmp>
 116:	89 2b       	or	r24, r25
 118:	09 f4       	brne	.+2      	; 0x11c <process_message+0x26>
inline void set_led_high(void) {
	PORTB |= _BV(PB0);
}

inline void set_led_low(void) {
	PORTB &= ~_BV(PB0);
 11a:	28 98       	cbi	0x05, 0	; 5
void process_message(char *message) {
	if (strcmp(message, "ON") == 0)
	set_led_high();
	else if (strcmp(message, "OFF") == 0)
	set_led_low();
}
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <main>:
inline void  set_led_high(void);
inline void  set_led_low(void);

volatile bool rf_interrupt = false;
uint8_t CONFIG;
int main(void) {
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
 12a:	ad 97       	sbiw	r28, 0x2d	; 45
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	f8 94       	cli
 130:	de bf       	out	0x3e, r29	; 62
 132:	0f be       	out	0x3f, r0	; 63
 134:	cd bf       	out	0x3d, r28	; 61
	uint8_t address[5] = { 0x01, 0x01, 0x01, 0x01, 0x01 };
 136:	85 e0       	ldi	r24, 0x05	; 5
 138:	e6 e0       	ldi	r30, 0x06	; 6
 13a:	f1 e0       	ldi	r31, 0x01	; 1
 13c:	de 01       	movw	r26, r28
 13e:	11 96       	adiw	r26, 0x01	; 1
 140:	01 90       	ld	r0, Z+
 142:	0d 92       	st	X+, r0
 144:	8a 95       	dec	r24
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x1e>
	else if (strcmp(message, "OFF") == 0)
	set_led_low();
}

inline void prepare_led_pin(void) {
	DDRB |= _BV(PB0);
 148:	20 9a       	sbi	0x04, 0	; 4
	PORTB &= ~_BV(PB0);
 14a:	28 98       	cbi	0x05, 0	; 5
volatile bool rf_interrupt = false;
uint8_t CONFIG;
int main(void) {
	uint8_t address[5] = { 0x01, 0x01, 0x01, 0x01, 0x01 };
	prepare_led_pin();
	sei();
 14c:	78 94       	sei
	nRF24L01 *rf = setup_rf();
 14e:	0e 94 53 00 	call	0xa6	; 0xa6 <setup_rf>
 152:	8c 01       	movw	r16, r24
	nRF24L01_listen(rf, 0, address);
 154:	ae 01       	movw	r20, r28
 156:	4f 5f       	subi	r20, 0xFF	; 255
 158:	5f 4f       	sbci	r21, 0xFF	; 255
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	0e 94 4c 01 	call	0x298	; 0x298 <nRF24L01_listen>
	uint8_t addr[5];
	nRF24L01_read_register(rf, CONFIG, addr, 1);
 162:	21 e0       	ldi	r18, 0x01	; 1
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	ae 01       	movw	r20, r28
 168:	4a 5f       	subi	r20, 0xFA	; 250
 16a:	5f 4f       	sbci	r21, 0xFF	; 255
 16c:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <CONFIG>
 170:	c8 01       	movw	r24, r16
 172:	0e 94 3e 01 	call	0x27c	; 0x27c <nRF24L01_read_register>

	while (true) {
		if (rf_interrupt) {
 176:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 17a:	88 23       	and	r24, r24
 17c:	e1 f3       	breq	.-8      	; 0x176 <main+0x54>
			rf_interrupt = false;
 17e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
			while (nRF24L01_data_received(rf)) {
 182:	0a c0       	rjmp	.+20     	; 0x198 <main+0x76>
				nRF24L01Message msg;
				nRF24L01_read_received_data(rf, &msg);
 184:	be 01       	movw	r22, r28
 186:	65 5f       	subi	r22, 0xF5	; 245
 188:	7f 4f       	sbci	r23, 0xFF	; 255
 18a:	c8 01       	movw	r24, r16
 18c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <nRF24L01_read_received_data>
				process_message((char *)msg.data);
 190:	ce 01       	movw	r24, r28
 192:	0d 96       	adiw	r24, 0x0d	; 13
 194:	0e 94 7b 00 	call	0xf6	; 0xf6 <process_message>
	nRF24L01_read_register(rf, CONFIG, addr, 1);

	while (true) {
		if (rf_interrupt) {
			rf_interrupt = false;
			while (nRF24L01_data_received(rf)) {
 198:	c8 01       	movw	r24, r16
 19a:	0e 94 b3 01 	call	0x366	; 0x366 <nRF24L01_data_received>
 19e:	81 11       	cpse	r24, r1
 1a0:	f1 cf       	rjmp	.-30     	; 0x184 <main+0x62>
				nRF24L01Message msg;
				nRF24L01_read_received_data(rf, &msg);
				process_message((char *)msg.data);
			}

			nRF24L01_listen(rf, 0, address);
 1a2:	ae 01       	movw	r20, r28
 1a4:	4f 5f       	subi	r20, 0xFF	; 255
 1a6:	5f 4f       	sbci	r21, 0xFF	; 255
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	c8 01       	movw	r24, r16
 1ae:	0e 94 4c 01 	call	0x298	; 0x298 <nRF24L01_listen>
 1b2:	e1 cf       	rjmp	.-62     	; 0x176 <main+0x54>

000001b4 <__vector_1>:
inline void set_led_low(void) {
	PORTB &= ~_BV(PB0);
}

// nRF24L01 interrupt
ISR(INT0_vect) {
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	8f 93       	push	r24
	rf_interrupt = true;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 1c6:	8f 91       	pop	r24
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <copy_address>:
	uint8_t config;
	nRF24L01_read_register(rf, CONFIG, &config, 1);
	config |= _BV(PRIM_RX);
	nRF24L01_write_register(rf, CONFIG, &config, 1);
	return success;
}
 1d2:	fc 01       	movw	r30, r24
 1d4:	a6 2f       	mov	r26, r22
 1d6:	b7 2f       	mov	r27, r23
 1d8:	9c 01       	movw	r18, r24
 1da:	2b 5f       	subi	r18, 0xFB	; 251
 1dc:	3f 4f       	sbci	r19, 0xFF	; 255
 1de:	91 91       	ld	r25, Z+
 1e0:	9d 93       	st	X+, r25
 1e2:	e2 17       	cp	r30, r18
 1e4:	f3 07       	cpc	r31, r19
 1e6:	d9 f7       	brne	.-10     	; 0x1de <copy_address+0xc>
 1e8:	08 95       	ret

000001ea <nRF24L01_init>:
 1ea:	80 e1       	ldi	r24, 0x10	; 16
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 10 03 	call	0x620	; 0x620 <malloc>
 1f2:	20 e1       	ldi	r18, 0x10	; 16
 1f4:	fc 01       	movw	r30, r24
 1f6:	11 92       	st	Z+, r1
 1f8:	2a 95       	dec	r18
 1fa:	e9 f7       	brne	.-6      	; 0x1f6 <nRF24L01_init+0xc>
 1fc:	08 95       	ret

000001fe <nRF24L01_send_command>:
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	ec 01       	movw	r28, r24
 204:	da 01       	movw	r26, r20
 206:	e8 81       	ld	r30, Y
 208:	f9 81       	ldd	r31, Y+1	; 0x01
 20a:	50 81       	ld	r21, Z
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0a 80       	ldd	r0, Y+2	; 0x02
 212:	02 c0       	rjmp	.+4      	; 0x218 <nRF24L01_send_command+0x1a>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	0a 94       	dec	r0
 21a:	e2 f7       	brpl	.-8      	; 0x214 <nRF24L01_send_command+0x16>
 21c:	80 95       	com	r24
 21e:	85 23       	and	r24, r21
 220:	80 83       	st	Z, r24
 222:	6e bd       	out	0x2e, r22	; 46
 224:	0d b4       	in	r0, 0x2d	; 45
 226:	07 fe       	sbrs	r0, 7
 228:	fd cf       	rjmp	.-6      	; 0x224 <nRF24L01_send_command+0x26>
 22a:	8e b5       	in	r24, 0x2e	; 46
 22c:	8f 87       	std	Y+15, r24	; 0x0f
 22e:	21 15       	cp	r18, r1
 230:	31 05       	cpc	r19, r1
 232:	79 f0       	breq	.+30     	; 0x252 <nRF24L01_send_command+0x54>
 234:	fd 01       	movw	r30, r26
 236:	2a 0f       	add	r18, r26
 238:	3b 1f       	adc	r19, r27
 23a:	df 01       	movw	r26, r30
 23c:	90 81       	ld	r25, Z
 23e:	9e bd       	out	0x2e, r25	; 46
 240:	0d b4       	in	r0, 0x2d	; 45
 242:	07 fe       	sbrs	r0, 7
 244:	fd cf       	rjmp	.-6      	; 0x240 <nRF24L01_send_command+0x42>
 246:	9e b5       	in	r25, 0x2e	; 46
 248:	9c 93       	st	X, r25
 24a:	31 96       	adiw	r30, 0x01	; 1
 24c:	e2 17       	cp	r30, r18
 24e:	f3 07       	cpc	r31, r19
 250:	a1 f7       	brne	.-24     	; 0x23a <nRF24L01_send_command+0x3c>
 252:	e8 81       	ld	r30, Y
 254:	f9 81       	ldd	r31, Y+1	; 0x01
 256:	20 81       	ld	r18, Z
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0a 80       	ldd	r0, Y+2	; 0x02
 25e:	02 c0       	rjmp	.+4      	; 0x264 <nRF24L01_send_command+0x66>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	0a 94       	dec	r0
 266:	e2 f7       	brpl	.-8      	; 0x260 <nRF24L01_send_command+0x62>
 268:	82 2b       	or	r24, r18
 26a:	80 83       	st	Z, r24
 26c:	8f 85       	ldd	r24, Y+15	; 0x0f
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <nRF24L01_write_register>:
 274:	60 62       	ori	r22, 0x20	; 32
 276:	0e 94 ff 00 	call	0x1fe	; 0x1fe <nRF24L01_send_command>
 27a:	08 95       	ret

0000027c <nRF24L01_read_register>:
 27c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <nRF24L01_send_command>
 280:	08 95       	ret

00000282 <nRF24L01_no_op>:
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	50 e0       	ldi	r21, 0x00	; 0
 28a:	6f ef       	ldi	r22, 0xFF	; 255
 28c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <nRF24L01_send_command>
 290:	08 95       	ret

00000292 <nRF24L01_update_status>:
 292:	0e 94 41 01 	call	0x282	; 0x282 <nRF24L01_no_op>
 296:	08 95       	ret

00000298 <nRF24L01_listen>:
 298:	df 92       	push	r13
 29a:	ef 92       	push	r14
 29c:	ff 92       	push	r15
 29e:	0f 93       	push	r16
 2a0:	1f 93       	push	r17
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <nRF24L01_listen+0x10>
 2a8:	00 d0       	rcall	.+0      	; 0x2aa <nRF24L01_listen+0x12>
 2aa:	00 d0       	rcall	.+0      	; 0x2ac <nRF24L01_listen+0x14>
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
 2b0:	7c 01       	movw	r14, r24
 2b2:	d6 2e       	mov	r13, r22
 2b4:	ca 01       	movw	r24, r20
 2b6:	be 01       	movw	r22, r28
 2b8:	6f 5f       	subi	r22, 0xFF	; 255
 2ba:	7f 4f       	sbci	r23, 0xFF	; 255
 2bc:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <copy_address>
 2c0:	6a e0       	ldi	r22, 0x0A	; 10
 2c2:	6d 0d       	add	r22, r13
 2c4:	25 e0       	ldi	r18, 0x05	; 5
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	ae 01       	movw	r20, r28
 2ca:	4f 5f       	subi	r20, 0xFF	; 255
 2cc:	5f 4f       	sbci	r21, 0xFF	; 255
 2ce:	c7 01       	movw	r24, r14
 2d0:	0e 94 3a 01 	call	0x274	; 0x274 <nRF24L01_write_register>
 2d4:	21 e0       	ldi	r18, 0x01	; 1
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	ae 01       	movw	r20, r28
 2da:	4a 5f       	subi	r20, 0xFA	; 250
 2dc:	5f 4f       	sbci	r21, 0xFF	; 255
 2de:	62 e0       	ldi	r22, 0x02	; 2
 2e0:	c7 01       	movw	r24, r14
 2e2:	0e 94 3e 01 	call	0x27c	; 0x27c <nRF24L01_read_register>
 2e6:	01 e0       	ldi	r16, 0x01	; 1
 2e8:	10 e0       	ldi	r17, 0x00	; 0
 2ea:	c8 01       	movw	r24, r16
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <nRF24L01_listen+0x5a>
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	da 94       	dec	r13
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <nRF24L01_listen+0x56>
 2f6:	9e 81       	ldd	r25, Y+6	; 0x06
 2f8:	89 2b       	or	r24, r25
 2fa:	8e 83       	std	Y+6, r24	; 0x06
 2fc:	21 e0       	ldi	r18, 0x01	; 1
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	ae 01       	movw	r20, r28
 302:	4a 5f       	subi	r20, 0xFA	; 250
 304:	5f 4f       	sbci	r21, 0xFF	; 255
 306:	62 e0       	ldi	r22, 0x02	; 2
 308:	c7 01       	movw	r24, r14
 30a:	0e 94 3a 01 	call	0x274	; 0x274 <nRF24L01_write_register>
 30e:	d7 01       	movw	r26, r14
 310:	13 96       	adiw	r26, 0x03	; 3
 312:	ed 91       	ld	r30, X+
 314:	fc 91       	ld	r31, X
 316:	14 97       	sbiw	r26, 0x04	; 4
 318:	80 81       	ld	r24, Z
 31a:	15 96       	adiw	r26, 0x05	; 5
 31c:	0c 90       	ld	r0, X
 31e:	02 c0       	rjmp	.+4      	; 0x324 <nRF24L01_listen+0x8c>
 320:	00 0f       	add	r16, r16
 322:	11 1f       	adc	r17, r17
 324:	0a 94       	dec	r0
 326:	e2 f7       	brpl	.-8      	; 0x320 <nRF24L01_listen+0x88>
 328:	08 2b       	or	r16, r24
 32a:	00 83       	st	Z, r16
 32c:	26 96       	adiw	r28, 0x06	; 6
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	f8 94       	cli
 332:	de bf       	out	0x3e, r29	; 62
 334:	0f be       	out	0x3f, r0	; 63
 336:	cd bf       	out	0x3d, r28	; 61
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	1f 91       	pop	r17
 33e:	0f 91       	pop	r16
 340:	ff 90       	pop	r15
 342:	ef 90       	pop	r14
 344:	df 90       	pop	r13
 346:	08 95       	ret

00000348 <nRF24L01_pipe_number_received>:
 348:	fc 01       	movw	r30, r24
 34a:	27 85       	ldd	r18, Z+15	; 0x0f
 34c:	2e 70       	andi	r18, 0x0E	; 14
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	35 95       	asr	r19
 352:	27 95       	ror	r18
 354:	26 30       	cpi	r18, 0x06	; 6
 356:	31 05       	cpc	r19, r1
 358:	1c f4       	brge	.+6      	; 0x360 <nRF24L01_pipe_number_received+0x18>
 35a:	82 2f       	mov	r24, r18
 35c:	93 2f       	mov	r25, r19
 35e:	08 95       	ret
 360:	8f ef       	ldi	r24, 0xFF	; 255
 362:	9f ef       	ldi	r25, 0xFF	; 255
 364:	08 95       	ret

00000366 <nRF24L01_data_received>:
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	ec 01       	movw	r28, r24
 36c:	eb 81       	ldd	r30, Y+3	; 0x03
 36e:	fc 81       	ldd	r31, Y+4	; 0x04
 370:	20 81       	ld	r18, Z
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0d 80       	ldd	r0, Y+5	; 0x05
 378:	02 c0       	rjmp	.+4      	; 0x37e <nRF24L01_data_received+0x18>
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	0a 94       	dec	r0
 380:	e2 f7       	brpl	.-8      	; 0x37a <nRF24L01_data_received+0x14>
 382:	80 95       	com	r24
 384:	82 23       	and	r24, r18
 386:	80 83       	st	Z, r24
 388:	ce 01       	movw	r24, r28
 38a:	0e 94 49 01 	call	0x292	; 0x292 <nRF24L01_update_status>
 38e:	ce 01       	movw	r24, r28
 390:	0e 94 a4 01 	call	0x348	; 0x348 <nRF24L01_pipe_number_received>
 394:	89 2f       	mov	r24, r25
 396:	80 95       	com	r24
 398:	88 1f       	adc	r24, r24
 39a:	88 27       	eor	r24, r24
 39c:	88 1f       	adc	r24, r24
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

000003a4 <nRF24L01_clear_interrupts>:
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	1f 92       	push	r1
 3aa:	cd b7       	in	r28, 0x3d	; 61
 3ac:	de b7       	in	r29, 0x3e	; 62
 3ae:	20 e7       	ldi	r18, 0x70	; 112
 3b0:	29 83       	std	Y+1, r18	; 0x01
 3b2:	21 e0       	ldi	r18, 0x01	; 1
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	ae 01       	movw	r20, r28
 3b8:	4f 5f       	subi	r20, 0xFF	; 255
 3ba:	5f 4f       	sbci	r21, 0xFF	; 255
 3bc:	67 e0       	ldi	r22, 0x07	; 7
 3be:	0e 94 3a 01 	call	0x274	; 0x274 <nRF24L01_write_register>
 3c2:	0f 90       	pop	r0
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <nRF24L01_begin>:
 3ca:	ff 92       	push	r15
 3cc:	0f 93       	push	r16
 3ce:	1f 93       	push	r17
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	1f 92       	push	r1
 3d6:	cd b7       	in	r28, 0x3d	; 61
 3d8:	de b7       	in	r29, 0x3e	; 62
 3da:	8c 01       	movw	r16, r24
 3dc:	dc 01       	movw	r26, r24
 3de:	ed 91       	ld	r30, X+
 3e0:	fc 91       	ld	r31, X
 3e2:	11 97       	sbiw	r26, 0x01	; 1
 3e4:	42 91       	ld	r20, -Z
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	9c 01       	movw	r18, r24
 3ec:	12 96       	adiw	r26, 0x02	; 2
 3ee:	0c 90       	ld	r0, X
 3f0:	12 97       	sbiw	r26, 0x02	; 2
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <nRF24L01_begin+0x2e>
 3f4:	22 0f       	add	r18, r18
 3f6:	33 1f       	adc	r19, r19
 3f8:	0a 94       	dec	r0
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <nRF24L01_begin+0x2a>
 3fc:	24 2b       	or	r18, r20
 3fe:	20 83       	st	Z, r18
 400:	13 96       	adiw	r26, 0x03	; 3
 402:	ed 91       	ld	r30, X+
 404:	fc 91       	ld	r31, X
 406:	14 97       	sbiw	r26, 0x04	; 4
 408:	42 91       	ld	r20, -Z
 40a:	9c 01       	movw	r18, r24
 40c:	15 96       	adiw	r26, 0x05	; 5
 40e:	0c 90       	ld	r0, X
 410:	15 97       	sbiw	r26, 0x05	; 5
 412:	02 c0       	rjmp	.+4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 414:	22 0f       	add	r18, r18
 416:	33 1f       	adc	r19, r19
 418:	0a 94       	dec	r0
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 41c:	24 2b       	or	r18, r20
 41e:	20 83       	st	Z, r18
 420:	ed 91       	ld	r30, X+
 422:	fc 91       	ld	r31, X
 424:	11 97       	sbiw	r26, 0x01	; 1
 426:	40 81       	ld	r20, Z
 428:	9c 01       	movw	r18, r24
 42a:	12 96       	adiw	r26, 0x02	; 2
 42c:	0c 90       	ld	r0, X
 42e:	12 97       	sbiw	r26, 0x02	; 2
 430:	02 c0       	rjmp	.+4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 432:	22 0f       	add	r18, r18
 434:	33 1f       	adc	r19, r19
 436:	0a 94       	dec	r0
 438:	e2 f7       	brpl	.-8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 43a:	24 2b       	or	r18, r20
 43c:	20 83       	st	Z, r18
 43e:	13 96       	adiw	r26, 0x03	; 3
 440:	ed 91       	ld	r30, X+
 442:	fc 91       	ld	r31, X
 444:	14 97       	sbiw	r26, 0x04	; 4
 446:	30 81       	ld	r19, Z
 448:	ac 01       	movw	r20, r24
 44a:	15 96       	adiw	r26, 0x05	; 5
 44c:	0c 90       	ld	r0, X
 44e:	15 97       	sbiw	r26, 0x05	; 5
 450:	02 c0       	rjmp	.+4      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 452:	44 0f       	add	r20, r20
 454:	55 1f       	adc	r21, r21
 456:	0a 94       	dec	r0
 458:	e2 f7       	brpl	.-8      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 45a:	24 2f       	mov	r18, r20
 45c:	20 95       	com	r18
 45e:	23 23       	and	r18, r19
 460:	20 83       	st	Z, r18
 462:	2c b5       	in	r18, 0x2c	; 44
 464:	20 61       	ori	r18, 0x10	; 16
 466:	2c bd       	out	0x2c, r18	; 44
 468:	2c b5       	in	r18, 0x2c	; 44
 46a:	20 64       	ori	r18, 0x40	; 64
 46c:	2c bd       	out	0x2c, r18	; 44
 46e:	16 96       	adiw	r26, 0x06	; 6
 470:	ed 91       	ld	r30, X+
 472:	fc 91       	ld	r31, X
 474:	17 97       	sbiw	r26, 0x07	; 7
 476:	42 91       	ld	r20, -Z
 478:	9c 01       	movw	r18, r24
 47a:	18 96       	adiw	r26, 0x08	; 8
 47c:	0c 90       	ld	r0, X
 47e:	18 97       	sbiw	r26, 0x08	; 8
 480:	02 c0       	rjmp	.+4      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 482:	22 0f       	add	r18, r18
 484:	33 1f       	adc	r19, r19
 486:	0a 94       	dec	r0
 488:	e2 f7       	brpl	.-8      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 48a:	24 2b       	or	r18, r20
 48c:	20 83       	st	Z, r18
 48e:	19 96       	adiw	r26, 0x09	; 9
 490:	ed 91       	ld	r30, X+
 492:	fc 91       	ld	r31, X
 494:	1a 97       	sbiw	r26, 0x0a	; 10
 496:	42 91       	ld	r20, -Z
 498:	9c 01       	movw	r18, r24
 49a:	1b 96       	adiw	r26, 0x0b	; 11
 49c:	0c 90       	ld	r0, X
 49e:	1b 97       	sbiw	r26, 0x0b	; 11
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 4a2:	22 0f       	add	r18, r18
 4a4:	33 1f       	adc	r19, r19
 4a6:	0a 94       	dec	r0
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 4aa:	24 2b       	or	r18, r20
 4ac:	20 83       	st	Z, r18
 4ae:	1c 96       	adiw	r26, 0x0c	; 12
 4b0:	ed 91       	ld	r30, X+
 4b2:	fc 91       	ld	r31, X
 4b4:	1d 97       	sbiw	r26, 0x0d	; 13
 4b6:	22 91       	ld	r18, -Z
 4b8:	1e 96       	adiw	r26, 0x0e	; 14
 4ba:	0c 90       	ld	r0, X
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	0a 94       	dec	r0
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 4c6:	80 95       	com	r24
 4c8:	82 23       	and	r24, r18
 4ca:	80 83       	st	Z, r24
 4cc:	8c b5       	in	r24, 0x2c	; 44
 4ce:	87 7f       	andi	r24, 0xF7	; 247
 4d0:	8c bd       	out	0x2c, r24	; 44
 4d2:	8c b5       	in	r24, 0x2c	; 44
 4d4:	8b 7f       	andi	r24, 0xFB	; 251
 4d6:	8c bd       	out	0x2c, r24	; 44
 4d8:	8c b5       	in	r24, 0x2c	; 44
 4da:	8e 7f       	andi	r24, 0xFE	; 254
 4dc:	8c bd       	out	0x2c, r24	; 44
 4de:	8c b5       	in	r24, 0x2c	; 44
 4e0:	8d 7f       	andi	r24, 0xFD	; 253
 4e2:	8c bd       	out	0x2c, r24	; 44
 4e4:	8d b5       	in	r24, 0x2d	; 45
 4e6:	81 60       	ori	r24, 0x01	; 1
 4e8:	8d bd       	out	0x2d, r24	; 45
 4ea:	8c b5       	in	r24, 0x2c	; 44
 4ec:	8f 7d       	andi	r24, 0xDF	; 223
 4ee:	8c bd       	out	0x2c, r24	; 44
 4f0:	20 e0       	ldi	r18, 0x00	; 0
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	40 e0       	ldi	r20, 0x00	; 0
 4f6:	50 e0       	ldi	r21, 0x00	; 0
 4f8:	62 ee       	ldi	r22, 0xE2	; 226
 4fa:	c8 01       	movw	r24, r16
 4fc:	0e 94 ff 00 	call	0x1fe	; 0x1fe <nRF24L01_send_command>
 500:	20 e0       	ldi	r18, 0x00	; 0
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	40 e0       	ldi	r20, 0x00	; 0
 506:	50 e0       	ldi	r21, 0x00	; 0
 508:	61 ee       	ldi	r22, 0xE1	; 225
 50a:	c8 01       	movw	r24, r16
 50c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <nRF24L01_send_command>
 510:	c8 01       	movw	r24, r16
 512:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <nRF24L01_clear_interrupts>
 516:	8f e0       	ldi	r24, 0x0F	; 15
 518:	89 83       	std	Y+1, r24	; 0x01
 51a:	21 e0       	ldi	r18, 0x01	; 1
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	ae 01       	movw	r20, r28
 520:	4f 5f       	subi	r20, 0xFF	; 255
 522:	5f 4f       	sbci	r21, 0xFF	; 255
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	c8 01       	movw	r24, r16
 528:	0e 94 3a 01 	call	0x274	; 0x274 <nRF24L01_write_register>
 52c:	0f 2e       	mov	r0, r31
 52e:	ff e3       	ldi	r31, 0x3F	; 63
 530:	ff 2e       	mov	r15, r31
 532:	f0 2d       	mov	r31, r0
 534:	f9 82       	std	Y+1, r15	; 0x01
 536:	21 e0       	ldi	r18, 0x01	; 1
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	ae 01       	movw	r20, r28
 53c:	4f 5f       	subi	r20, 0xFF	; 255
 53e:	5f 4f       	sbci	r21, 0xFF	; 255
 540:	61 e0       	ldi	r22, 0x01	; 1
 542:	c8 01       	movw	r24, r16
 544:	0e 94 3a 01 	call	0x274	; 0x274 <nRF24L01_write_register>
 548:	f9 82       	std	Y+1, r15	; 0x01
 54a:	21 e0       	ldi	r18, 0x01	; 1
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	ae 01       	movw	r20, r28
 550:	4f 5f       	subi	r20, 0xFF	; 255
 552:	5f 4f       	sbci	r21, 0xFF	; 255
 554:	6c e1       	ldi	r22, 0x1C	; 28
 556:	c8 01       	movw	r24, r16
 558:	0e 94 3a 01 	call	0x274	; 0x274 <nRF24L01_write_register>
 55c:	84 e0       	ldi	r24, 0x04	; 4
 55e:	89 83       	std	Y+1, r24	; 0x01
 560:	21 e0       	ldi	r18, 0x01	; 1
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	ae 01       	movw	r20, r28
 566:	4f 5f       	subi	r20, 0xFF	; 255
 568:	5f 4f       	sbci	r21, 0xFF	; 255
 56a:	6d e1       	ldi	r22, 0x1D	; 29
 56c:	c8 01       	movw	r24, r16
 56e:	0e 94 3a 01 	call	0x274	; 0x274 <nRF24L01_write_register>
 572:	19 82       	std	Y+1, r1	; 0x01
 574:	21 e0       	ldi	r18, 0x01	; 1
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	ae 01       	movw	r20, r28
 57a:	4f 5f       	subi	r20, 0xFF	; 255
 57c:	5f 4f       	sbci	r21, 0xFF	; 255
 57e:	62 e0       	ldi	r22, 0x02	; 2
 580:	c8 01       	movw	r24, r16
 582:	0e 94 3a 01 	call	0x274	; 0x274 <nRF24L01_write_register>
 586:	0f 90       	pop	r0
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	1f 91       	pop	r17
 58e:	0f 91       	pop	r16
 590:	ff 90       	pop	r15
 592:	08 95       	ret

00000594 <nRF24L01_clear_receive_interrupt>:
void nRF24L01_clear_transmit_interrupts(nRF24L01 *rf) {
	uint8_t data = _BV(TX_DS) | _BV(MAX_RT);
	nRF24L01_write_register(rf, STATUS, &data, 1);
}

void nRF24L01_clear_receive_interrupt(nRF24L01 *rf) {
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
 598:	1f 92       	push	r1
 59a:	cd b7       	in	r28, 0x3d	; 61
 59c:	de b7       	in	r29, 0x3e	; 62
 59e:	fc 01       	movw	r30, r24
	uint8_t data = _BV(RX_DR) | rf->status;
 5a0:	97 85       	ldd	r25, Z+15	; 0x0f
 5a2:	90 64       	ori	r25, 0x40	; 64
 5a4:	99 83       	std	Y+1, r25	; 0x01
	nRF24L01_write_register(rf, STATUS, &data, 1);
 5a6:	21 e0       	ldi	r18, 0x01	; 1
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	ae 01       	movw	r20, r28
 5ac:	4f 5f       	subi	r20, 0xFF	; 255
 5ae:	5f 4f       	sbci	r21, 0xFF	; 255
 5b0:	67 e0       	ldi	r22, 0x07	; 7
 5b2:	cf 01       	movw	r24, r30
 5b4:	0e 94 3a 01 	call	0x274	; 0x274 <nRF24L01_write_register>
}
 5b8:	0f 90       	pop	r0
 5ba:	df 91       	pop	r29
 5bc:	cf 91       	pop	r28
 5be:	08 95       	ret

000005c0 <nRF24L01_read_received_data>:
	nRF24L01_write_register(rf, EN_RXADDR, &current_pipes, 1);

	set_high(rf->ce);
}

bool nRF24L01_read_received_data(nRF24L01 *rf, nRF24L01Message *message) {
 5c0:	0f 93       	push	r16
 5c2:	1f 93       	push	r17
 5c4:	cf 93       	push	r28
 5c6:	df 93       	push	r29
 5c8:	8c 01       	movw	r16, r24
 5ca:	eb 01       	movw	r28, r22
	message->pipe_number = nRF24L01_pipe_number_received(rf);
 5cc:	0e 94 a4 01 	call	0x348	; 0x348 <nRF24L01_pipe_number_received>
 5d0:	99 83       	std	Y+1, r25	; 0x01
 5d2:	88 83       	st	Y, r24
	nRF24L01_clear_receive_interrupt(rf);
 5d4:	c8 01       	movw	r24, r16
 5d6:	0e 94 ca 02 	call	0x594	; 0x594 <nRF24L01_clear_receive_interrupt>
	if (message->pipe_number < 0) {
 5da:	88 81       	ld	r24, Y
 5dc:	99 81       	ldd	r25, Y+1	; 0x01
 5de:	99 23       	and	r25, r25
 5e0:	1c f4       	brge	.+6      	; 0x5e8 <nRF24L01_read_received_data+0x28>
		message->length = 0;
 5e2:	1a a2       	std	Y+34, r1	; 0x22
		return false;
 5e4:	80 e0       	ldi	r24, 0x00	; 0
 5e6:	17 c0       	rjmp	.+46     	; 0x616 <nRF24L01_read_received_data+0x56>
	}

	nRF24L01_read_register(rf, R_RX_PL_WID, &message->length, 1);
 5e8:	21 e0       	ldi	r18, 0x01	; 1
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	ae 01       	movw	r20, r28
 5ee:	4e 5d       	subi	r20, 0xDE	; 222
 5f0:	5f 4f       	sbci	r21, 0xFF	; 255
 5f2:	60 e6       	ldi	r22, 0x60	; 96
 5f4:	c8 01       	movw	r24, r16
 5f6:	0e 94 3e 01 	call	0x27c	; 0x27c <nRF24L01_read_register>

	if (message->length > 0) {
 5fa:	2a a1       	ldd	r18, Y+34	; 0x22
 5fc:	22 23       	and	r18, r18
 5fe:	51 f0       	breq	.+20     	; 0x614 <nRF24L01_read_received_data+0x54>
		nRF24L01_send_command(rf, R_RX_PAYLOAD, &message->data,
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	ae 01       	movw	r20, r28
 604:	4e 5f       	subi	r20, 0xFE	; 254
 606:	5f 4f       	sbci	r21, 0xFF	; 255
 608:	61 e6       	ldi	r22, 0x61	; 97
 60a:	c8 01       	movw	r24, r16
 60c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <nRF24L01_send_command>
		message->length);
	}

	return true;
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	01 c0       	rjmp	.+2      	; 0x616 <nRF24L01_read_received_data+0x56>
 614:	81 e0       	ldi	r24, 0x01	; 1
}
 616:	df 91       	pop	r29
 618:	cf 91       	pop	r28
 61a:	1f 91       	pop	r17
 61c:	0f 91       	pop	r16
 61e:	08 95       	ret

00000620 <malloc>:
 620:	0f 93       	push	r16
 622:	1f 93       	push	r17
 624:	cf 93       	push	r28
 626:	df 93       	push	r29
 628:	82 30       	cpi	r24, 0x02	; 2
 62a:	91 05       	cpc	r25, r1
 62c:	10 f4       	brcc	.+4      	; 0x632 <malloc+0x12>
 62e:	82 e0       	ldi	r24, 0x02	; 2
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__flp>
 636:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <__flp+0x1>
 63a:	20 e0       	ldi	r18, 0x00	; 0
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	a0 e0       	ldi	r26, 0x00	; 0
 640:	b0 e0       	ldi	r27, 0x00	; 0
 642:	30 97       	sbiw	r30, 0x00	; 0
 644:	19 f1       	breq	.+70     	; 0x68c <malloc+0x6c>
 646:	40 81       	ld	r20, Z
 648:	51 81       	ldd	r21, Z+1	; 0x01
 64a:	02 81       	ldd	r16, Z+2	; 0x02
 64c:	13 81       	ldd	r17, Z+3	; 0x03
 64e:	48 17       	cp	r20, r24
 650:	59 07       	cpc	r21, r25
 652:	c8 f0       	brcs	.+50     	; 0x686 <malloc+0x66>
 654:	84 17       	cp	r24, r20
 656:	95 07       	cpc	r25, r21
 658:	69 f4       	brne	.+26     	; 0x674 <malloc+0x54>
 65a:	10 97       	sbiw	r26, 0x00	; 0
 65c:	31 f0       	breq	.+12     	; 0x66a <malloc+0x4a>
 65e:	12 96       	adiw	r26, 0x02	; 2
 660:	0c 93       	st	X, r16
 662:	12 97       	sbiw	r26, 0x02	; 2
 664:	13 96       	adiw	r26, 0x03	; 3
 666:	1c 93       	st	X, r17
 668:	27 c0       	rjmp	.+78     	; 0x6b8 <malloc+0x98>
 66a:	00 93 16 01 	sts	0x0116, r16	; 0x800116 <__flp>
 66e:	10 93 17 01 	sts	0x0117, r17	; 0x800117 <__flp+0x1>
 672:	22 c0       	rjmp	.+68     	; 0x6b8 <malloc+0x98>
 674:	21 15       	cp	r18, r1
 676:	31 05       	cpc	r19, r1
 678:	19 f0       	breq	.+6      	; 0x680 <malloc+0x60>
 67a:	42 17       	cp	r20, r18
 67c:	53 07       	cpc	r21, r19
 67e:	18 f4       	brcc	.+6      	; 0x686 <malloc+0x66>
 680:	9a 01       	movw	r18, r20
 682:	bd 01       	movw	r22, r26
 684:	ef 01       	movw	r28, r30
 686:	df 01       	movw	r26, r30
 688:	f8 01       	movw	r30, r16
 68a:	db cf       	rjmp	.-74     	; 0x642 <malloc+0x22>
 68c:	21 15       	cp	r18, r1
 68e:	31 05       	cpc	r19, r1
 690:	f9 f0       	breq	.+62     	; 0x6d0 <malloc+0xb0>
 692:	28 1b       	sub	r18, r24
 694:	39 0b       	sbc	r19, r25
 696:	24 30       	cpi	r18, 0x04	; 4
 698:	31 05       	cpc	r19, r1
 69a:	80 f4       	brcc	.+32     	; 0x6bc <malloc+0x9c>
 69c:	8a 81       	ldd	r24, Y+2	; 0x02
 69e:	9b 81       	ldd	r25, Y+3	; 0x03
 6a0:	61 15       	cp	r22, r1
 6a2:	71 05       	cpc	r23, r1
 6a4:	21 f0       	breq	.+8      	; 0x6ae <malloc+0x8e>
 6a6:	fb 01       	movw	r30, r22
 6a8:	93 83       	std	Z+3, r25	; 0x03
 6aa:	82 83       	std	Z+2, r24	; 0x02
 6ac:	04 c0       	rjmp	.+8      	; 0x6b6 <malloc+0x96>
 6ae:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__flp+0x1>
 6b2:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__flp>
 6b6:	fe 01       	movw	r30, r28
 6b8:	32 96       	adiw	r30, 0x02	; 2
 6ba:	44 c0       	rjmp	.+136    	; 0x744 <malloc+0x124>
 6bc:	fe 01       	movw	r30, r28
 6be:	e2 0f       	add	r30, r18
 6c0:	f3 1f       	adc	r31, r19
 6c2:	81 93       	st	Z+, r24
 6c4:	91 93       	st	Z+, r25
 6c6:	22 50       	subi	r18, 0x02	; 2
 6c8:	31 09       	sbc	r19, r1
 6ca:	39 83       	std	Y+1, r19	; 0x01
 6cc:	28 83       	st	Y, r18
 6ce:	3a c0       	rjmp	.+116    	; 0x744 <malloc+0x124>
 6d0:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__brkval>
 6d4:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__brkval+0x1>
 6d8:	23 2b       	or	r18, r19
 6da:	41 f4       	brne	.+16     	; 0x6ec <malloc+0xcc>
 6dc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 6e0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 6e4:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <__brkval+0x1>
 6e8:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <__brkval>
 6ec:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 6f0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 6f4:	21 15       	cp	r18, r1
 6f6:	31 05       	cpc	r19, r1
 6f8:	41 f4       	brne	.+16     	; 0x70a <malloc+0xea>
 6fa:	2d b7       	in	r18, 0x3d	; 61
 6fc:	3e b7       	in	r19, 0x3e	; 62
 6fe:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 702:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 706:	24 1b       	sub	r18, r20
 708:	35 0b       	sbc	r19, r21
 70a:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <__brkval>
 70e:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <__brkval+0x1>
 712:	e2 17       	cp	r30, r18
 714:	f3 07       	cpc	r31, r19
 716:	a0 f4       	brcc	.+40     	; 0x740 <malloc+0x120>
 718:	2e 1b       	sub	r18, r30
 71a:	3f 0b       	sbc	r19, r31
 71c:	28 17       	cp	r18, r24
 71e:	39 07       	cpc	r19, r25
 720:	78 f0       	brcs	.+30     	; 0x740 <malloc+0x120>
 722:	ac 01       	movw	r20, r24
 724:	4e 5f       	subi	r20, 0xFE	; 254
 726:	5f 4f       	sbci	r21, 0xFF	; 255
 728:	24 17       	cp	r18, r20
 72a:	35 07       	cpc	r19, r21
 72c:	48 f0       	brcs	.+18     	; 0x740 <malloc+0x120>
 72e:	4e 0f       	add	r20, r30
 730:	5f 1f       	adc	r21, r31
 732:	50 93 15 01 	sts	0x0115, r21	; 0x800115 <__brkval+0x1>
 736:	40 93 14 01 	sts	0x0114, r20	; 0x800114 <__brkval>
 73a:	81 93       	st	Z+, r24
 73c:	91 93       	st	Z+, r25
 73e:	02 c0       	rjmp	.+4      	; 0x744 <malloc+0x124>
 740:	e0 e0       	ldi	r30, 0x00	; 0
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	cf 01       	movw	r24, r30
 746:	df 91       	pop	r29
 748:	cf 91       	pop	r28
 74a:	1f 91       	pop	r17
 74c:	0f 91       	pop	r16
 74e:	08 95       	ret

00000750 <free>:
 750:	cf 93       	push	r28
 752:	df 93       	push	r29
 754:	00 97       	sbiw	r24, 0x00	; 0
 756:	09 f4       	brne	.+2      	; 0x75a <free+0xa>
 758:	81 c0       	rjmp	.+258    	; 0x85c <free+0x10c>
 75a:	fc 01       	movw	r30, r24
 75c:	32 97       	sbiw	r30, 0x02	; 2
 75e:	13 82       	std	Z+3, r1	; 0x03
 760:	12 82       	std	Z+2, r1	; 0x02
 762:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__flp>
 766:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__flp+0x1>
 76a:	10 97       	sbiw	r26, 0x00	; 0
 76c:	81 f4       	brne	.+32     	; 0x78e <free+0x3e>
 76e:	20 81       	ld	r18, Z
 770:	31 81       	ldd	r19, Z+1	; 0x01
 772:	82 0f       	add	r24, r18
 774:	93 1f       	adc	r25, r19
 776:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__brkval>
 77a:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__brkval+0x1>
 77e:	28 17       	cp	r18, r24
 780:	39 07       	cpc	r19, r25
 782:	51 f5       	brne	.+84     	; 0x7d8 <free+0x88>
 784:	f0 93 15 01 	sts	0x0115, r31	; 0x800115 <__brkval+0x1>
 788:	e0 93 14 01 	sts	0x0114, r30	; 0x800114 <__brkval>
 78c:	67 c0       	rjmp	.+206    	; 0x85c <free+0x10c>
 78e:	ed 01       	movw	r28, r26
 790:	20 e0       	ldi	r18, 0x00	; 0
 792:	30 e0       	ldi	r19, 0x00	; 0
 794:	ce 17       	cp	r28, r30
 796:	df 07       	cpc	r29, r31
 798:	40 f4       	brcc	.+16     	; 0x7aa <free+0x5a>
 79a:	4a 81       	ldd	r20, Y+2	; 0x02
 79c:	5b 81       	ldd	r21, Y+3	; 0x03
 79e:	9e 01       	movw	r18, r28
 7a0:	41 15       	cp	r20, r1
 7a2:	51 05       	cpc	r21, r1
 7a4:	f1 f0       	breq	.+60     	; 0x7e2 <free+0x92>
 7a6:	ea 01       	movw	r28, r20
 7a8:	f5 cf       	rjmp	.-22     	; 0x794 <free+0x44>
 7aa:	d3 83       	std	Z+3, r29	; 0x03
 7ac:	c2 83       	std	Z+2, r28	; 0x02
 7ae:	40 81       	ld	r20, Z
 7b0:	51 81       	ldd	r21, Z+1	; 0x01
 7b2:	84 0f       	add	r24, r20
 7b4:	95 1f       	adc	r25, r21
 7b6:	c8 17       	cp	r28, r24
 7b8:	d9 07       	cpc	r29, r25
 7ba:	59 f4       	brne	.+22     	; 0x7d2 <free+0x82>
 7bc:	88 81       	ld	r24, Y
 7be:	99 81       	ldd	r25, Y+1	; 0x01
 7c0:	84 0f       	add	r24, r20
 7c2:	95 1f       	adc	r25, r21
 7c4:	02 96       	adiw	r24, 0x02	; 2
 7c6:	91 83       	std	Z+1, r25	; 0x01
 7c8:	80 83       	st	Z, r24
 7ca:	8a 81       	ldd	r24, Y+2	; 0x02
 7cc:	9b 81       	ldd	r25, Y+3	; 0x03
 7ce:	93 83       	std	Z+3, r25	; 0x03
 7d0:	82 83       	std	Z+2, r24	; 0x02
 7d2:	21 15       	cp	r18, r1
 7d4:	31 05       	cpc	r19, r1
 7d6:	29 f4       	brne	.+10     	; 0x7e2 <free+0x92>
 7d8:	f0 93 17 01 	sts	0x0117, r31	; 0x800117 <__flp+0x1>
 7dc:	e0 93 16 01 	sts	0x0116, r30	; 0x800116 <__flp>
 7e0:	3d c0       	rjmp	.+122    	; 0x85c <free+0x10c>
 7e2:	e9 01       	movw	r28, r18
 7e4:	fb 83       	std	Y+3, r31	; 0x03
 7e6:	ea 83       	std	Y+2, r30	; 0x02
 7e8:	49 91       	ld	r20, Y+
 7ea:	59 91       	ld	r21, Y+
 7ec:	c4 0f       	add	r28, r20
 7ee:	d5 1f       	adc	r29, r21
 7f0:	ec 17       	cp	r30, r28
 7f2:	fd 07       	cpc	r31, r29
 7f4:	61 f4       	brne	.+24     	; 0x80e <free+0xbe>
 7f6:	80 81       	ld	r24, Z
 7f8:	91 81       	ldd	r25, Z+1	; 0x01
 7fa:	84 0f       	add	r24, r20
 7fc:	95 1f       	adc	r25, r21
 7fe:	02 96       	adiw	r24, 0x02	; 2
 800:	e9 01       	movw	r28, r18
 802:	99 83       	std	Y+1, r25	; 0x01
 804:	88 83       	st	Y, r24
 806:	82 81       	ldd	r24, Z+2	; 0x02
 808:	93 81       	ldd	r25, Z+3	; 0x03
 80a:	9b 83       	std	Y+3, r25	; 0x03
 80c:	8a 83       	std	Y+2, r24	; 0x02
 80e:	e0 e0       	ldi	r30, 0x00	; 0
 810:	f0 e0       	ldi	r31, 0x00	; 0
 812:	12 96       	adiw	r26, 0x02	; 2
 814:	8d 91       	ld	r24, X+
 816:	9c 91       	ld	r25, X
 818:	13 97       	sbiw	r26, 0x03	; 3
 81a:	00 97       	sbiw	r24, 0x00	; 0
 81c:	19 f0       	breq	.+6      	; 0x824 <free+0xd4>
 81e:	fd 01       	movw	r30, r26
 820:	dc 01       	movw	r26, r24
 822:	f7 cf       	rjmp	.-18     	; 0x812 <free+0xc2>
 824:	8d 91       	ld	r24, X+
 826:	9c 91       	ld	r25, X
 828:	11 97       	sbiw	r26, 0x01	; 1
 82a:	9d 01       	movw	r18, r26
 82c:	2e 5f       	subi	r18, 0xFE	; 254
 82e:	3f 4f       	sbci	r19, 0xFF	; 255
 830:	82 0f       	add	r24, r18
 832:	93 1f       	adc	r25, r19
 834:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__brkval>
 838:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__brkval+0x1>
 83c:	28 17       	cp	r18, r24
 83e:	39 07       	cpc	r19, r25
 840:	69 f4       	brne	.+26     	; 0x85c <free+0x10c>
 842:	30 97       	sbiw	r30, 0x00	; 0
 844:	29 f4       	brne	.+10     	; 0x850 <free+0x100>
 846:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__flp+0x1>
 84a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__flp>
 84e:	02 c0       	rjmp	.+4      	; 0x854 <free+0x104>
 850:	13 82       	std	Z+3, r1	; 0x03
 852:	12 82       	std	Z+2, r1	; 0x02
 854:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <__brkval+0x1>
 858:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <__brkval>
 85c:	df 91       	pop	r29
 85e:	cf 91       	pop	r28
 860:	08 95       	ret

00000862 <strcmp>:
 862:	fb 01       	movw	r30, r22
 864:	dc 01       	movw	r26, r24
 866:	8d 91       	ld	r24, X+
 868:	01 90       	ld	r0, Z+
 86a:	80 19       	sub	r24, r0
 86c:	01 10       	cpse	r0, r1
 86e:	d9 f3       	breq	.-10     	; 0x866 <strcmp+0x4>
 870:	99 0b       	sbc	r25, r25
 872:	08 95       	ret

00000874 <_exit>:
 874:	f8 94       	cli

00000876 <__stop_program>:
 876:	ff cf       	rjmp	.-2      	; 0x876 <__stop_program>
